AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Onboarding self service team alert notification dispatcher

Parameters:
  SlackWebhookPath:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /onboarding-infrastructure/monitoring/slack-webhook-path
    Description: "Slack webhook path for DI alerts. The value is the path of the Slack webhook after the domain, without the leading slash."
  SlackChannelName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /onboarding-infrastructure/monitoring/slack-channel
    Description: "Slack channel to use for alerts and alarms"
  NotificationEmailAddress:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /onboarding-infrastructure/monitoring/notification-email-address
    Description: "Email address to use when delivering Canary notifications"
  EnableAlerting:
    Description: "Whether to enable alerts to be sent out (only allowed in production and integration)"
    Type: String
    AllowedValues: [ true, false ]
    Default: true

Outputs:
  SnsTopic:
    Description: The SNS topic to send alarms to
    Value: !GetAtt AlertNotificationsSnsTopic.TopicName
    Export:
      Name: !Sub "${AWS::StackName}-sns-topic"
  SnsTopicArn:
    Description: The SNS topic arn to send alarms to
    Value: !Ref AlertNotificationsSnsTopic
    Export:
      Name: !Sub "${AWS::StackName}-sns-topic-arn"
  SnsTopicKeyArn:
    Description: The SNS topic key arn to encrypt and decrypt messages
    Value: !GetAtt AlertNotificationsSnsTopicKey.Arn
    Export:
      Name: !Sub "${AWS::StackName}-sns-topic-key-arn"

Conditions:
  IsAlerting: !Equals [true, !Ref EnableAlerting]

Resources:
  AlertNotificationsSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Onboarding Monitoring Notifications
      Subscription:
        - !If
          - IsAlerting
          - Protocol: lambda
            Endpoint: !GetAtt SnsToSlackFunction.Arn
          - !Ref AWS::NoValue
      KmsMasterKeyId: !GetAtt AlertNotificationsSnsTopicKey.Arn

  AlertNotificationsSnsTopicKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/alertNotificationsSnsTopicKey
      TargetKeyId: !Ref AlertNotificationsSnsTopicKey

  AlertNotificationsSnsTopicKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Key used to encrypt Alert notifications SNS topic
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: kms:*
            Resource: "*"

  BackupAlertSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmailAddress
      KmsMasterKeyId: !GetAtt BackupAlertSnsTopicKey.Arn

  BackupAlertSnsTopicKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/backupAlertSnsTopicKey
      TargetKeyId: !Ref BackupAlertSnsTopicKey

  BackupAlertSnsTopicKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Key used to encrypt backup alerts SNS topic
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              AWS: !GetAtt SnsToSlackFunctionExecutionRole.Arn
            Action: kms:*
            Resource: "*"

  BackupAlertSnsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref BackupAlertSnsTopic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource: !Ref BackupAlertSnsTopic
            Principal:
              AWS: !GetAtt SnsToSlackFunctionExecutionRole.Arn

  SnsToSlackFunction:
    # checkov:skip=CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
    # checkov:skip=CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda function that takes an SNS message and sends it to Slack
      CodeUri: src
      Handler: sns-to-slack.lambdaHandler
      Runtime: nodejs22.x
      LoggingConfig:
        LogGroup: !Ref LambdaLogsGroup
      Environment:
        Variables:
          SLACK_CHANNEL: !Ref SlackChannelName
          SLACK_WEBHOOK_PATH: !Ref SlackWebhookPath
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref BackupAlertSnsTopic
      Role: !GetAtt SnsToSlackFunctionExecutionRole.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints: [ sns-to-slack.ts ]

  SnsToSlackFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SnsToSlackFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref AlertNotificationsSnsTopic

  SnsToSlackFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"

  LambdaLogsGroup:
    # checkov:skip=CKV_AWS_158:Ensure that CloudWatch Log Group is encrypted by KMS
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/aws/lambda/onboarding-infrastructure/monitoring/alert-notifications'
      RetentionInDays: 14
