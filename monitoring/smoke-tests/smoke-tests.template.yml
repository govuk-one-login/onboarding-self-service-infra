AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Onboarding self service team smoke-test monitoring

Parameters:
  SlackWebhookPath:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /onboarding-infrastructure/monitoring/slack-webhook-path
    Description: "Slack webhook path for DI alerts. The value is the path of the Slack webhook after the domain, without the leading slash."
  SlackChannelName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /onboarding-infrastructure/monitoring/slack-channel
    Description: "Slack channel to use for alerts and alarms"
  NotificationEmailAddress:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /onboarding-infrastructure/monitoring/notification-email-address
    Description: "Email address to use when delivering Canary notifications"

Outputs:
  CanaryExecutionRole:
    Description: The execution role for canaries
    Value: !GetAtt CanaryExecutionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-canary-role"
  SnsTopic:
    Description: The SNS topic to send alarms to
    Value: !Ref CanarySnsTopic
    Export:
      Name: !Sub "${AWS::StackName}-sns-topic"
  ArtifactsBucket:
    Description: The bucket to send canary results to
    Value: !Ref CanaryResultsBucket
    Export:
      Name: !Sub "${AWS::StackName}-artifact-bucket"

Resources:
  CanarySnsTopic:
    # checkov:skip=CKV_AWS_26: "Ensure all data stored in the SNS topic is encrypted"
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Onboarding Smoke Test Healthchecks
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt CanarySnsToSlackFunction.Arn

  LambdaDeadLetterQueueTopic:
    # checkov:skip=CKV_AWS_26: "Ensure all data stored in the SNS topic is encrypted"
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmailAddress

  CanarySnsToSlackFunction:
    # checkov:skip=CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
    # checkov:skip=CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda function that takes a Canary SNS message and sends it to Slack
      CodeUri: src
      Handler: sns-to-slack.lambdaHandler
      Runtime: nodejs18.x
      Environment:
        Variables:
          SLACK_CHANNEL: !Ref SlackChannelName
          SLACK_WEBHOOK_PATH: !Ref SlackWebhookPath
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref LambdaDeadLetterQueueTopic
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt LambdaDeadLetterQueueTopic.TopicName
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints: [ sns-to-slack.ts ]

  CanarySnsToSlackFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CanarySnsToSlackFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref CanarySnsTopic

  CanaryResultsBucket:
    # checkov:skip=CKV_AWS_18: "Ensure the S3 bucket has access logging enabled"
    # checkov:skip=CKV_AWS_19: "Ensure the S3 bucket has server-side-encryption enabled"
    # checkov:skip=CKV_AWS_21: "Ensure the S3 bucket has versioning enabled"
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'onboarding-self-service-monitoring-canary-results'
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        BlockPublicAcls: true
      LifecycleConfiguration:
        Rules:
          - Id: RemoveOldObjects
            Status: Enabled
            ExpirationInDays: 7

  CanaryLogGroup:
    # checkov:skip=CKV_AWS_158: "Ensure that CloudWatch Log Group is encrypted by KMS"
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/onboarding-self-service/monitoring/canary'
      RetentionInDays: 14

  CanaryExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CanaryPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub ${CanaryResultsBucket.Arn}/*

              - Effect: Allow
                Action: s3:GetBucketLocation
                Resource: !GetAtt CanaryResultsBucket.Arn

              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt CanaryLogGroup.Arn

              - Effect: Allow
                Action: s3:ListAllMyBuckets
                Resource: "*"

              - Effect: Allow
                Action: cloudwatch:PutMetricData
                Condition:
                  StringEquals:
                    "cloudwatch:namespace": CloudWatchSynthetics
                Resource: "*"
