AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Onboarding self service team smoke-test monitoring

Parameters:
  NotificationsStack:
    Type: String
    Description: "The stack name for the stack that contains the alert notification resources"
    Default: onboarding-infrastructure-monitoring-alert-notifications
  EnableAlerting:
    Description: "Whether to enable alerting for Security Hub events"
    Type: String
    AllowedValues: [ true, false ]
    Default: true

Outputs:
  CanaryExecutionRole:
    Description: The execution role for canaries
    Value: !GetAtt CanaryExecutionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-canary-role"
  SnsTopic:
    Description: The SNS topic to send alarms to
    Value: !Ref CanarySnsTopic
    Export:
      Name: !Sub "${AWS::StackName}-sns-topic"
  ArtifactsBucket:
    Description: The bucket to send canary results to
    Value: !Ref CanaryResultsBucket
    Export:
      Name: !Sub "${AWS::StackName}-artifact-bucket"

Conditions:
  IsAlerting: !Equals [true, !Ref EnableAlerting]

Mappings:
  Account:
    "494650018671": # Development account
      canaryResultsBucket: 'onboarding-monitoring-development-canary-results'
    "399055180839": # Build account
      canaryResultsBucket: 'onboarding-monitoring-build-canary-results'
    "325730373996": # Staging account
      canaryResultsBucket: 'onboarding-monitoring-staging-canary-results'
    "663985455444": # Integration account, monitors production endpoints
      canaryResultsBucket: 'onboarding-monitoring-integration-canary-results'
    "389946456390": # Production account, monitors integration endpoints
      canaryResultsBucket: 'onboarding-monitoring-production-canary-results'

Resources:
  CanarySnsTopic:
    # checkov:skip=CKV_AWS_26: "Ensure all data stored in the SNS topic is encrypted"
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Onboarding Smoke Test Heartbeat Checks
      Subscription:
        - !If
          - IsAlerting
          - Protocol: lambda
            Endpoint: !GetAtt CanarySnsNotificationFunction.Arn
          - !Ref AWS::NoValue

  CanarySnsNotificationFunction:
    # checkov:skip=CKV_AWS_115: "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"
    # checkov:skip=CKV_AWS_117: "Ensure that AWS Lambda function is configured inside a VPC"
    # checkov:skip=CKV_AWS_173: "Check encryption settings for Lambda environmental variable"
    Type: AWS::Serverless::Function
    Properties:
      Description: A lambda function that takes a Canary SNS message and sends it as an alert notification
      CodeUri: src
      Handler: send-alert.lambdaHandler
      Runtime: nodejs18.x
      LoggingConfig:
        LogGroup: !Ref LambdaLogsGroup
      Environment:
        Variables:
          SNS_TOPIC_ARN:
            Fn::ImportValue:
              !Sub "${NotificationsStack}-sns-topic-arn"
      Policies:
        - SNSPublishMessagePolicy:
            TopicName:
              Fn::ImportValue:
                !Sub "${NotificationsStack}-sns-topic-arn"
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints: [ send-alert.ts ]

  CanarySnsToSlackFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CanarySnsNotificationFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref CanarySnsTopic

  NotificationEventPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sns:Publish'
            Resource:
              Fn::ImportValue:
                !Sub "${NotificationsStack}-sns-topic-arn"
      Topics:
        - Fn::ImportValue:
            !Sub "${NotificationsStack}-sns-topic-arn"

  CanaryResultsBucket:
    # checkov:skip=CKV_AWS_18: "Ensure the S3 bucket has access logging enabled"
    # checkov:skip=CKV_AWS_19: "Ensure the S3 bucket has server-side-encryption enabled"
    # checkov:skip=CKV_AWS_21: "Ensure the S3 bucket has versioning enabled"
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !FindInMap [ Account, !Ref AWS::AccountId, canaryResultsBucket ]
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        BlockPublicAcls: true
      LifecycleConfiguration:
        Rules:
          - Id: RemoveOldObjects
            Status: Enabled
            ExpirationInDays: 7

  CanaryLogGroup:
    # checkov:skip=CKV_AWS_158: "Ensure that CloudWatch Log Group is encrypted by KMS"
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/aws/cloudwatch/onboarding-infrastructure/monitoring/heartbeats'
      RetentionInDays: 14

  LambdaLogsGroup:
    # checkov:skip=CKV_AWS_158:Ensure that CloudWatch Log Group is encrypted by KMS
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/aws/lambda/onboarding-infrastructure/monitoring/heartbeat-alerts'
      RetentionInDays: 14

  CanaryExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CanaryPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub ${CanaryResultsBucket.Arn}/*

              - Effect: Allow
                Action: s3:GetBucketLocation
                Resource: !GetAtt CanaryResultsBucket.Arn

              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt CanaryLogGroup.Arn

              - Effect: Allow
                Action: s3:ListAllMyBuckets
                Resource: "*"

              - Effect: Allow
                Action: cloudwatch:PutMetricData
                Condition:
                  StringEquals:
                    "cloudwatch:namespace": CloudWatchSynthetics
                Resource: "*"
