AWSTemplateFormatVersion: "2010-09-09"
Description: Supporting stacks for secure pipelines
Transform: AWS::LanguageExtensions

Parameters:
  # Template reference https://github.com/govuk-one-login/devplatform-deploy
  TemplateStorageBucket:
    Type: String
    Default: https://template-storage-templatebucket-1upzyw6v9cs42.s3.amazonaws.com
  BackupTemplateStorageBucket:
    Type: String
    Default: https://backup-template-storage-templatebucket-747f3bzunrod.s3.eu-west-2.amazonaws.com
  ExportNamePrefix:
    Type: String
    Default: secure-pipelines
    AllowedPattern: ^.*[^-]$
    Description: Prefix to use when importing or exporting values
  InitialAccount:
    Type: String
    Default: No
    AllowedValues: [ Yes, No ]
  Environment:
    Description: The environment type
    Type: String
    Default: development
    AllowedValues:
      - "development"
      - "build"
      - "staging"
      - "integration"
      - "production"
  DownstreamAccounts:
    Type: String
    Default: ""
  DeveloperNotificationsEmail:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /self-service/secure-pipelines/developer-notification-email
  SlackWorkspaceId:
    Type: String
    Default: "T8GT9416G"

Mappings:
  Slack:
    Channel:
      development: C04QFSGKCGG    # di-sse-dev-notifications
      default: C02T6P3NVDX        # di-sse-tech-notifications

Conditions:
  InitialAccount: !Equals [ !Ref InitialAccount, Yes ]
  ProductionAccount: !Not [ !Equals [ !Ref Environment, development ] ]
  InitialProductionAccount: !And [ !Condition InitialAccount, !Condition ProductionAccount ]

Resources:
  GitHubIdentityProvider:
    Type: AWS::CloudFormation::Stack
    Condition: InitialProductionAccount
    Properties:
      TemplateURL: !Sub ${TemplateStorageBucket}/github-identity/template.yaml
      Parameters:
        System: Dev Platform

  ContainerSigner:
    Type: AWS::CloudFormation::Stack
    Condition: InitialProductionAccount
    DependsOn: GitHubIdentityProvider
    Properties:
      TemplateURL: !Sub ${TemplateStorageBucket}/container-signer/template.yaml
      Parameters:
        AllowedAccounts: !Ref DownstreamAccounts

  CodeSigner:
    Type: AWS::CloudFormation::Stack
    Condition: InitialAccount
    Properties:
      TemplateURL: !Sub ${TemplateStorageBucket}/signer/template.yaml
      Parameters:
        System: Dev Platform

  SlackNotifications:
    Type: AWS::CloudFormation::Stack
    DependsOn: InfrastructureAuditHook
    Properties:
      TemplateURL: !Sub ${TemplateStorageBucket}/build-notifications/template.yaml
      Parameters:
        SlackWorkspaceId: !Ref SlackWorkspaceId
        SlackChannelId: !FindInMap [ Slack, Channel, !Ref Environment, { DefaultValue: !FindInMap [ Slack, Channel, default ] } ]

  ECRScanningNotifications:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateStorageBucket}/ecr-image-scan-findings-logger/template.yaml
      Parameters:
        NotificationEmail: !Ref DeveloperNotificationsEmail

  LambdaAuditHook:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateStorageBucket}/lambda-audit-hook/template.yaml

  CheckovHook:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateStorageBucket}/checkov-hook/template.yaml
      Parameters:
        FailureMode: WARN

  InfrastructureAuditHook:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateStorageBucket}/infrastructure-audit-hook/template.yaml

  APIGatewayLoggingConfig:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${TemplateStorageBucket}/api-gateway-logs/template.yaml

  BackupVaultMonitoring:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${BackupTemplateStorageBucket}/backup-vault-monitoring/template.yaml
      Parameters:
        Environment: !If [ ProductionAccount, production, "non-prod" ]
        DeployChatBot: "No"
  
Outputs:
  GitHubIdentityProviderARN:
    Condition: InitialProductionAccount
    Value: !GetAtt GitHubIdentityProvider.Outputs.GitHubIdentityProviderArn
  ContainerSigningKeyARN:
    Condition: InitialProductionAccount
    Value: !GetAtt ContainerSigner.Outputs.ContainerSignerKmsKeyArn
  SigningProfileName:
    Condition: InitialAccount
    Value: !GetAtt CodeSigner.Outputs.SigningProfileName
  SigningProfileARN:
    Condition: InitialAccount
    Value: !GetAtt CodeSigner.Outputs.SigningProfileArn
  SigningProfileVersionARN:
    Condition: InitialAccount
    Value: !GetAtt CodeSigner.Outputs.SigningProfileVersionArn
  SlackNotificationsStackName:
    Value: !Select [ 1, !Split [ "/", !Ref SlackNotifications ] ]
    Export:
      Name: !Sub ${ExportNamePrefix}-SlackNotificationsStackName
